// Tests nested blocks, variable scoping, and complex expressions

var global = "I am global";

{
  var a = 10;
  print global;
  
  {
    var b = 20;
    var global = "I am shadowed";
    print global;
    print a + b;
    
    {
      var c = 30;
      print a + b + c;
      
      // Test for loop with complex condition and increment
      for (var i = 0; i < 5 and b > 15; i = i + 1) {
        print i;
        if (i == 3) {
          break;  // Note: break is not in your grammar, but testing for robustness
        }
      }
    }
    
    print "After nested block";
  }
  
  // Test complex assignment
  a = a * 2 + 5;
  print a;
}

print global;

// Function that returns a function (tests complex call patterns)
fun makeCounter() {
  var count = 0;
  
  fun counter() {
    count = count + 1;
    return count;
  }
  
  return counter();
}

var myCounter = makeCounter();
print myCounter;
print myCounter;
print myCounter;

// Test while loop with complex condition
var x = 0;
var y = 10;

while (x < 5 and y > 0) {
  print x * y;
  x = x + 1;
  y = y - 2;
}

// Test combined expressions with different precedence
print (5 + 3 * 2) != (4 * 3 - 6);
print !(true and false) or (false or true);